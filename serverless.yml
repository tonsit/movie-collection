service: movie-collection
# app and org for use with dashboard.serverless.com
app: movies
org: tonsit
frameworkVersion: "=1.59.1"

provider:
  name: aws
  apiKeys:
    - main
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    COLLECTION_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: !GetAtt [ DynamoDB, Arn ]

functions:
  create:
    handler: collection.create
    events:
      - http:
          path: movies
          method: post
          private: true
          request:
            schema:
              application/json: ${file(schema/movies.json)}
            

  search:
    handler: collection.search
    events:
      - http:
          path: movies
          method: get
          private: true

  read:
    handler: collection.read
    events:
      - http:
          path: movies/{id}
          method: get
          private: true
          parameters:
            path:
              id: true

  update:
    handler: collection.update
    events:
      - http:
          path: movies/{id}
          method: patch
          private: true
          parameters:
            path:
              id: true

  delete:
    handler: collection.delete
    events:
      - http:
          path: movies/{id}
          method: delete
          private: true
          parameters:
            path:
              id: true
  
resources:
  Resources:
    DynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COLLECTION_TABLE}         
